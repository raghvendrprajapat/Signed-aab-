name: Build Web to Signed Android

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App name"
        required: true
        default: "My Web2App"
      APP_ID:
        description: "Package ID (e.g. com.example.app)"
        required: true
        default: "com.example.web2app"
      WEB_URL:
        description: "Live URL (must be https:// unless you allow http)"
        required: true
        default: "https://example.com"
      VERSION_NAME:
        description: "Public version (e.g. 1.0.0)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Integer. Must increase every Play upload"
        required: true
        default: "1"
      TARGET_SDK:
        description: "Target / compile SDK"
        required: true
        default: "35"
      ALLOW_MIXED_CONTENT:
        description: "Allow http:// content? true/false"
        required: true
        default: "false"
      PLUGINS:
        description: "Extra native plugins to include"
        required: true
        type: choice
        default: "none"
        options:
          - "none"
          - "camera"
          - "push"
          - "location"
          - "all"
      APP_ICON_URL:
        description: "Full URL to icon file OR public folder URL containing icon_xxxhdpi.png etc (optional)"
        required: false
        default: ""
      SPLASH_SCREEN_URL:
        description: "Full URL to splash file OR public folder URL containing splash.png (optional)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      APP_ID: ${{ github.event.inputs.APP_ID }}
      WEB_URL: ${{ github.event.inputs.WEB_URL }}
      VERSION_NAME: ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE: ${{ github.event.inputs.VERSION_CODE }}
      TARGET_SDK: ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK: "22"
      ALLOW_MIXED_CONTENT: ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      PLUGINS: ${{ github.event.inputs.PLUGINS }}

      KEYSTORE_BASE64:   ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS:         ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD:      ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Prepare webDir
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
            if npm run | grep -q " build"; then npm run build || true; fi
            for d in dist build public; do
              if [ -d "$d" ]; then echo "WEB_BUILD_DIR=$d" >> $GITHUB_ENV; break; fi
            done
          fi
          if ! grep -q WEB_BUILD_DIR $GITHUB_ENV 2>/dev/null; then
            mkdir -p minimal_www
            printf '<!doctype html><html><body style="font-family:sans-serif;text-align:center;padding-top:2rem;">Loading…</body></html>\n' > minimal_www/index.html
            echo "WEB_BUILD_DIR=minimal_www" >> $GITHUB_ENV
          fi
          npm install -D @capacitor/core @capacitor/cli @capacitor/android

      - name: Validate inputs
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! "$APP_ID" =~ ^[a-z]+([a-z0-9_]*)(\.[a-z][a-z0-9_]*)+$ ]]; then
            echo "❌ APP_ID invalid: $APP_ID"; exit 1
          fi
          if ! [[ "$VERSION_CODE" =~ ^[0-9]+$ ]]; then echo "❌ VERSION_CODE must be integer"; exit 1; fi
          if [[ "$ALLOW_MIXED_CONTENT" != "true" && ! "$WEB_URL" =~ ^https:// ]]; then
            echo "❌ WEB_URL must start with https:// (or set ALLOW_MIXED_CONTENT=true)"; exit 1
          fi
          for var in KEYSTORE_BASE64 KEYSTORE_PASSWORD KEY_ALIAS KEY_PASSWORD; do
            if [ -z "${!var:-}" ]; then echo "❌ Missing secret: $var"; exit 1; fi
          done

      - name: Restore keystore
        shell: bash
        run: |
          set -euo pipefail
          echo "$KEYSTORE_BASE64" | base64 -d > android.keystore
          ls -l android.keystore

      - name: Configure Capacitor
        shell: bash
        run: |
          set -euo pipefail
          echo "WEB_BUILD_DIR currently set to: $WEB_BUILD_DIR"
          npx cap init "$APP_NAME" "$APP_ID" --web-dir="$WEB_BUILD_DIR" || true
          printf '{\n' > capacitor.config.json
          printf '  "appId": "%s",\n' "$APP_ID" >> capacitor.config.json
          printf '  "appName": "%s",\n' "$APP_NAME" >> capacitor.config.json
          printf '  "webDir": "%s",\n' "$WEB_BUILD_DIR" >> capacitor.config.json
          printf '  "bundledWebRuntime": false,\n' >> capacitor.config.json
          printf '  "android": {\n' >> capacitor.config.json
          if [ "$ALLOW_MIXED_CONTENT" = "true" ]; then printf '    "allowMixedContent": true\n' >> capacitor.config.json; else printf '    "allowMixedContent": false\n' >> capacitor.config.json; fi
          printf '  }\n' >> capacitor.config.json
          printf '}\n' >> capacitor.config.json
          if [ "$PLUGINS" = "camera" ]; then npm install @capacitor/camera
          elif [ "$PLUGINS" = "push" ]; then npm install @capacitor/push-notifications
          elif [ "$PLUGINS" = "location" ]; then npm install @capacitor/geolocation
          elif [ "$PLUGINS" = "all" ]; then npm install @capacitor/camera @capacitor/push-notifications @capacitor/geolocation
          fi
          npx cap add android || true
          npx cap sync android

      # ... (branding steps unchanged) ...

      - name: Patch Gradle
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          cp ../android.keystore app/release.keystore
          if [ -f app/build.gradle ]; then FILE="app/build.gradle"; else FILE="app/build.gradle.kts"; fi
          sed -i -E "s/versionCode[ =]+[0-9]+/versionCode $VERSION_CODE/" "$FILE" || true
          sed -i -E "s/versionName[ =]+\"[^\"]+\"/versionName \"$VERSION_NAME\"/" "$FILE" || true
          sed -i -E "s/minSdkVersion[ =]+[0-9]+/minSdkVersion $MIN_SDK/" "$FILE" || true
          sed -i -E "s/minSdk[ =]+[0-9]+/minSdk $MIN_SDK/" "$FILE" || true
          sed -i -E "s/targetSdkVersion[ =]+[0-9]+/targetSdkVersion $TARGET_SDK/" "$FILE" || true
          sed -i -E "s/targetSdk[ =]+[0-9]+/targetSdk $TARGET_SDK/" "$FILE" || true
          sed -i -E "s/compileSdkVersion[ =]+[0-9]+/compileSdkVersion $TARGET_SDK/" "$FILE" || true
          sed -i -E "s/compileSdk[ =]+[0-9]+/compileSdk $TARGET_SDK/" "$FILE" || true
          if ! grep -q "signingConfigs" "$FILE"; then
            {
              echo ""
              echo "android {"
              echo "    signingConfigs {"
              echo "        release {"
              echo "            storeFile file(\"release.keystore\")"
              echo "            storePassword System.getenv(\"KEYSTORE_PASSWORD\")"
              echo "            keyAlias      System.getenv(\"KEY_ALIAS\")"
              echo "            keyPassword   System.getenv(\"KEY_PASSWORD\")"
              echo "        }"
              echo "    }"
              echo "    buildTypes {"
              echo "        release {"
              echo "            signingConfig signingConfigs.release"
              echo "            minifyEnabled false"
              echo "            shrinkResources false"
              echo "            debuggable false"
              echo "        }"
              echo "    }"
              echo "}"
            } >> "$FILE"
          fi
          if [ "$ALLOW_MIXED_CONTENT" = "true" ]; then
            MF="app/src/main/AndroidManifest.xml"
            if [ -f "$MF" ]; then
              if ! grep -q usesCleartextTraffic "$MF"; then
                sed -i 's/<application /<application android:usesCleartextTraffic="true" /' "$MF"
              fi
            fi
          fi

          # Ensure Android 13 notification permission
          MF="app/src/main/AndroidManifest.xml"
          if [ -f "$MF" ]; then
            if ! grep -q "android.permission.POST_NOTIFICATIONS" "$MF"; then
              sed -i '/<manifest /a <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />' "$MF"
            fi
            # Add location permissions if using the location plugin
            if [ "$PLUGINS" = "location" ] || [ "$PLUGINS" = "all" ]; then
              sed -i '/<manifest /a <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />' "$MF"
              sed -i '/<manifest /a <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />' "$MF"
              sed -i '/<application /i <uses-feature android:name="android.hardware.location.gps" android:required="false" />' "$MF"
            fi
          fi

      - name: Build release
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          ./gradlew clean --no-daemon
          ./gradlew :app:bundleRelease :app:assembleRelease --no-daemon
          mkdir -p ../out_aab ../out_apk
          cp app/build/outputs/bundle/release/*.aab ../out_aab/ || true
          cp app/build/outputs/apk/release/*.apk ../out_apk/   || true
