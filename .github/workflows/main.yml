name: Build Web to Signed Android

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App name"
        required: true
        default: "My Web2App"
      APP_ID:
        description: "Package ID (e.g. com.example.app)"
        required: true
        default: "com.example.web2app"
      WEB_URL:
        description: "Live URL (must be https:// unless you allow http)"
        required: true
        default: "https://example.com"
      VERSION_NAME:
        description: "Public version (e.g. 1.0.0)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Integer. Must increase every Play upload"
        required: true
        default: "1"
      TARGET_SDK:
        description: "Target / compile SDK"
        required: true
        default: "35"
      MIN_SDK:
        description: "Min SDK"
        required: true
        default: "22"
      ALLOW_MIXED_CONTENT:
        description: "Allow http:// content? true/false"
        required: true
        default: "false"
      PLUGINS:
        description: "Extra native plugins to include"
        required: true
        type: choice
        default: "none"
        options:
          - "none"
          - "camera"
          - "push"
          - "location"
          - "all"
      ICON_URL:
        description: "Public URL to a single app icon PNG (optional). This single PNG will be copied to multiple mipmap folders."
        required: false
        default: ""
      SPLASH_URL:
        description: "Public URL to a splash PNG (optional). This will be copied to drawable folders."
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      APP_ID: ${{ github.event.inputs.APP_ID }}
      WEB_URL: ${{ github.event.inputs.WEB_URL }}
      VERSION_NAME: ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE: ${{ github.event.inputs.VERSION_CODE }}
      TARGET_SDK: ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK: ${{ github.event.inputs.MIN_SDK }}
      ALLOW_MIXED_CONTENT: ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      PLUGINS: ${{ github.event.inputs.PLUGINS }}
      ICON_URL: ${{ github.event.inputs.ICON_URL }}
      SPLASH_URL: ${{ github.event.inputs.SPLASH_URL }}
      KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 1. Prepare webDir (works with OR without package.json)
      - name: Prepare webDir
        id: prepweb
        shell: bash
        run: |
          set -euo pipefail
          WEB_BUILD_DIR=""
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
            if npm run | grep -q " build"; then
              npm run build || true
            fi
            for d in dist build public; do
              if [ -d "$d" ]; then
                WEB_BUILD_DIR="$d"
                break
              fi
            done
          fi
          if [ -z "$WEB_BUILD_DIR" ]; then
            mkdir -p minimal_www
            echo '<!doctype html><html><body style="font-family:sans-serif;text-align:center;padding-top:2rem;">Loading…</body></html>' > minimal_www/index.html
            WEB_BUILD_DIR="minimal_www"
          fi
          echo "WEB_BUILD_DIR=$WEB_BUILD_DIR" >> $GITHUB_ENV
          npm install -D @capacitor/core@latest @capacitor/cli@latest @capacitor/android@latest

      # 2. Validate inputs + secrets before wasting time
      - name: Validate inputs
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! "${APP_ID}" =~ ^[a-z]+([.][a-z0-9_]+)+$ ]]; then
            echo "❌ APP_ID invalid: ${APP_ID}"
            exit 1
          fi
          if ! [[ "${VERSION_CODE}" =~ ^[0-9]+$ ]]; then
            echo "❌ VERSION_CODE must be integer"
            exit 1
          fi
          if [[ "${ALLOW_MIXED_CONTENT}" != "true" && ! "${WEB_URL}" =~ ^https:// ]]; then
            echo "❌ WEB_URL must start with https:// (or set ALLOW_MIXED_CONTENT=true)"
            exit 1
          fi
          for var in KEYSTORE_BASE64 KEYSTORE_PASSWORD KEY_ALIAS KEY_PASSWORD; do
            if [ -z "${!var:-}" ]; then
              echo "❌ Missing secret: $var"
              exit 1
            fi
          done

      # 3. Restore keystore from Base64
      - name: Restore keystore
        shell: bash
        run: |
          set -euo pipefail
          echo "${KEYSTORE_BASE64}" | base64 -d > android.keystore
          if [ ! -s android.keystore ]; then
            echo "❌ Failed to decode keystore"
            exit 1
          fi

      # 4. Init Capacitor project and generate capacitor.config.json
      - name: Configure Capacitor
        shell: bash
        run: |
          set -euo pipefail
          echo "WEB_BUILD_DIR=${WEB_BUILD_DIR}"
          npx cap init "${APP_NAME}" "${APP_ID}" --web-dir="${WEB_BUILD_DIR}" || true
          cat <<EOF > capacitor.config.json
{
  "appId": "${APP_ID}",
  "appName": "${APP_NAME}",
  "webDir": "${WEB_BUILD_DIR}",
  "bundledWebRuntime": false,
  "server": {
    "url": "${WEB_URL}",
    "cleartext": ${ALLOW_MIXED_CONTENT}
  },
  "android": {
    "allowMixedContent": ${ALLOW_MIXED_CONTENT}
  }
}
EOF
          if [ "${PLUGINS}" == "camera" ]; then
            npm install @capacitor/camera@latest
          elif [ "${PLUGINS}" == "push" ]; then
            npm install @capacitor/push-notifications@latest
          elif [ "${PLUGINS}" == "location" ]; then
            npm install @capacitor/geolocation@latest
          elif [ "${PLUGINS}" == "all" ]; then
            npm install @capacitor/camera@latest @capacitor/push-notifications@latest @capacitor/geolocation@latest
          fi
          npx cap add android --skip-dependency-check || true
          npx cap sync android

      # 4.5 Apply branding assets from ICON_URL and SPLASH_URL (if provided)
      - name: Apply branding assets from URL (if provided)
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          ICON="${ICON_URL}"
          SPLASH="${SPLASH_URL}"
          if [ -z "$ICON" ] && [ -z "$SPLASH" ]; then
            echo "ICON_URL and SPLASH_URL not provided — skipping branding download"
            exit 0
          fi
          if [ -n "$ICON" ]; then
            echo "Downloading icon from: $ICON"
            curl -sfSL "$ICON" -o /tmp/icon_xxxhdpi.png || true
          fi
          if [ -n "$SPLASH" ]; then
            echo "Downloading splash from: $SPLASH"
            curl -sfSL "$SPLASH" -o /tmp/splash.png || true
          fi
          if [ -f /tmp/icon_xxxhdpi.png ]; then
            for d in xxxhdpi xxhdpi xhdpi hdpi; do
              mkdir -p app/src/main/res/mipmap-${d}
              cp /tmp/icon_xxxhdpi.png app/src/main/res/mipmap-${d}/ic_launcher.png || true
              cp /tmp/icon_xxxhdpi.png app/src/main/res/mipmap-${d}/ic_launcher_round.png || true
            done
          fi
          if [ -f /tmp/splash.png ]; then
            for d in drawable drawable-hdpi drawable-xhdpi drawable-xxhdpi drawable-xxxhdpi; do
              mkdir -p app/src/main/res/${d}
              cp /tmp/splash.png app/src/main/res/${d}/splash.png || true
            done
          fi

      # 5. Patch Gradle for versioning, SDK levels, signing
      - name: Patch Gradle
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          cp ../android.keystore app/release.keystore
          if [ -f app/build.gradle ]; then
            FILE="app/build.gradle"
          else
            FILE="app/build.gradle.kts"
          fi
          echo "Patching $FILE"
          sed -i -E "s/versionCode[[:space:]=]+[0-9]+/versionCode ${VERSION_CODE}/" "$FILE" || true
          sed -i -E "s/versionName[[:space:]=]+\"[^\"]+\"/versionName \"${VERSION_NAME}\"/" "$FILE" || true
          sed -i -E "s/minSdkVersion[[:space:]=]+[0-9]+/minSdkVersion ${MIN_SDK}/" "$FILE" || true
          sed -i -E "s/minSdk[[:space:]=]+[0-9]+/minSdk ${MIN_SDK}/" "$FILE" || true
          sed -i -E "s/targetSdkVersion[[:space:]=]+[0-9]+/targetSdkVersion ${TARGET_SDK}/" "$FILE" || true
          sed -i -E "s/targetSdk[[:space:]=]+[0-9]+/targetSdk ${TARGET_SDK}/" "$FILE" || true
          sed -i -E "s/compileSdkVersion[[:space:]=]+[0-9]+/compileSdkVersion ${TARGET_SDK}/" "$FILE" || true
          sed -i -E "s/compileSdk[[:space:]=]+[0-9]+/compileSdk ${TARGET_SDK}/" "$FILE" || true
          if ! grep -q "signingConfigs" "$FILE"; then
            sed -i '/android {/a \
    signingConfigs {\
        release {\
            storeFile file("release.keystore")\
            storePassword System.getenv("KEYSTORE_PASSWORD")\
            keyAlias      System.getenv("KEY_ALIAS")\
            keyPassword   System.getenv("KEY_PASSWORD")\
        }\
    }\
    buildTypes {\
        release {\
            signingConfig signingConfigs.release\
            minifyEnabled false\
            shrinkResources false\
            debuggable false\
        }\
    }' "$FILE"
          fi
          if [ "${ALLOW_MIXED_CONTENT}" = "true" ]; then
            MF="app/src/main/AndroidManifest.xml"
            if [ -f "$MF" ]; then
              if ! grep -q usesCleartextTraffic "$MF"; then
                sed -i 's/<application /<application android:usesCleartextTraffic="true" /' "$MF"
              fi
            fi
          fi

      # 6. Build release AAB+APK and upload artifacts separately
      - name: Build release
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          ./gradlew clean :app:bundleRelease :app:assembleRelease
          mkdir -p ../out_aab ../out_apk
          cp app/build/outputs/bundle/release/*.aab ../out_aab/ || echo "No AAB found"
          cp app/build/outputs/apk/release/*release*.apk ../out_apk/ || echo "No APK found"
          echo "=== AAB files ==="; ls -l ../out_aab || true
          echo "=== APK files ==="; ls -l ../out_apk || true

      - name: Upload signed AAB
        uses: actions/upload-artifact@v4
        with:
          name: signed-aab
          path: out_aab

      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk
          path: out_apk
