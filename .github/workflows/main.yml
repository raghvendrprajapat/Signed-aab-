name: Build Web → Signed Android

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App name"
        required: true
        default: "My Web2App"
      APP_ID:
        description: "Package ID, e.g. com.example.app"
        required: true
        default: "com.example.web2app"
      WEB_URL:
        description: "Live URL (https://...)"
        required: true
        default: "https://example.com"
      VERSION_NAME:    {description: "Public version", required: true, default: "1.0.0"}
      VERSION_CODE:    {description: "Integer, +1 each upload", required: true, default: "1"}
      TARGET_SDK:      {description: "Target SDK", required: true, default: "35"}
      MIN_SDK:         {description: "Min SDK", required: true, default: "22"}
      ALLOW_MIXED_CONTENT:
        description: "Allow http:// ? (true/false)"
        required: true
        default: "false"
      PLUGINS:
        description: "Extra Capacitor plugins"
        required: true
        type: choice
        default: "none"
        options:
          - "none"
          - "camera"
          - "push"
          - "location"
          - "all"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      APP_ID:   ${{ github.event.inputs.APP_ID }}
      WEB_URL:  ${{ github.event.inputs.WEB_URL }}
      VERSION_NAME:  ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE:  ${{ github.event.inputs.VERSION_CODE }}
      TARGET_SDK:    ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK:       ${{ github.event.inputs.MIN_SDK }}
      ALLOW_MIXED_CONTENT: ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      PLUGINS: ${{ github.event.inputs.PLUGINS }}

      KEYSTORE_BASE64:   ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS:         ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD:      ${{ secrets.KEY_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with: {distribution: temurin, java-version: 17}

      - uses: actions/setup-node@v4
        with: {node-version: 20}

      # ---------- prep web ----------
      - name: Prepare webDir
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f package.json ]]; then
            [[ -f package-lock.json ]] && npm ci || npm i
            npm run | grep -q " build" && npm run build || true
            for d in dist build public; do
              [[ -d "$d" ]] && echo "WEB_BUILD_DIR=$d" >> $GITHUB_ENV && break
            done
          fi
          if [[ -z "${WEB_BUILD_DIR:-}" ]]; then
            mkdir -p minimal_www
            echo '<!doctype html><html><body>Loading…</body></html>' > minimal_www/index.html
            echo "WEB_BUILD_DIR=minimal_www" >> $GITHUB_ENV
          fi
          npm i -D @capacitor/{core,cli,android}

      # ---------- keystore ----------
      - name: Restore keystore
        shell: bash
        run: echo "$KEYSTORE_BASE64" | base64 -d > android.keystore

      # ---------- Capacitor ----------
      - name: Configure Capacitor
        shell: bash
        run: |
          source $GITHUB_ENV
          npx cap init "$APP_NAME" "$APP_ID" --web-dir="$WEB_BUILD_DIR" --npm-client npm || true
          cat > capacitor.config.ts <<EOF
          export default {
            appId: '$APP_ID',
            appName: '$APP_NAME',
            webDir: '$WEB_BUILD_DIR',
            bundledWebRuntime: false,
            server: {url: '$WEB_URL', cleartext: $ALLOW_MIXED_CONTENT},
            android: {allowMixedContent: $ALLOW_MIXED_CONTENT}
          };
EOF
          case "$PLUGINS" in
            camera)    npm i @capacitor/camera ;;
            push)      npm i @capacitor/push-notifications ;;
            location)  npm i @capacitor/geolocation ;;
            all)       npm i @capacitor/{camera,push-notifications,geolocation} ;;
          esac
          npx cap add android || true
          npx cap sync android

      # ---------- patch & sign ----------
      - name: Patch Gradle
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          cp ../android.keystore app/release.keystore
          FILE=$( [ -f app/build.gradle ] && echo app/build.gradle || echo app/build.gradle.kts )
          sed -i -E "s/versionCode[ =]+[0-9]+/versionCode $VERSION_CODE/" "$FILE"
          sed -i -E "s/versionName[ =]+\"[^\"]+\"/versionName \"$VERSION_NAME\"/" "$FILE"
          sed -i -E "s/minSdkVersion[ =]+[0-9]+/minSdkVersion $MIN_SDK/" "$FILE"
          sed -i -E "s/targetSdkVersion[ =]+[0-9]+/targetSdkVersion $TARGET_SDK/" "$FILE"
          sed -i -E "s/compileSdkVersion[ =]+[0-9]+/compileSdkVersion $TARGET_SDK/" "$FILE"
          grep -q signingConfigs "$FILE" || cat >>"$FILE" <<'GRADLE'
android {
  signingConfigs {
    release {
      storeFile file("release.keystore")
      storePassword System.getenv("KEYSTORE_PASSWORD")
      keyAlias      System.getenv("KEY_ALIAS")
      keyPassword   System.getenv("KEY_PASSWORD")
    }
  }
  buildTypes {
    release {
      signingConfig signingConfigs.release
      minifyEnabled false
      shrinkResources false
      debuggable false
    }
  }
}
GRADLE
          [[ "$ALLOW_MIXED_CONTENT" == "true" ]] && \
          sed -i 's/<application /<application android:usesCleartextTraffic="true" /' app/src/main/AndroidManifest.xml

      # ---------- build ----------
      - name: Build release
        shell: bash
        working-directory: android
        run: |
          ./gradlew clean :app:bundleRelease :app:assembleRelease
          mkdir -p ../out
          cp app/build/outputs/bundle/release/*.aab ../out/
          cp app/build/outputs/apk/release/*.apk ../out/

      - uses: actions/upload-artifact@v4
        with: {name: signed-release, path: out}
