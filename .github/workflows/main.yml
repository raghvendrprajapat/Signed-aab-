name: Build Web ➜ Signed Android

on:
  workflow_dispatch:
    inputs:
      APP_NAME:        {description: "App name",                   default: "My Web2App",     required: true}
      APP_ID:          {description: "Package ID e.g. com.foo.app",default: "com.example.app",required: true}
      WEB_URL:         {description: "Live site (https://…)",      default: "https://example.com", required: true}
      VERSION_NAME:    {description: "1.0.x",                      default: "1.0.0",          required: true}
      VERSION_CODE:    {description: "Integer ↑ each upload",      default: "1",              required: true}
      TARGET_SDK:      {description: "Compile/target SDK",         default: "35",             required: true}
      MIN_SDK:         {description: "Min SDK",                    default: "22",             required: true}
      ALLOW_MIXED_CONTENT:{description: "Allow http:// ?",         default: "false",          required: true}
      PLUGINS:
        description: "Extra Capacitor plugins"
        required: true
        type: choice
        default: "none"
        options: ["none","camera","push","location","all"]

permissions: {contents: read}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      # inputs
      APP_NAME:              ${{ github.event.inputs.APP_NAME }}
      APP_ID:                ${{ github.event.inputs.APP_ID }}
      WEB_URL:               ${{ github.event.inputs.WEB_URL }}
      VERSION_NAME:          ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE:          ${{ github.event.inputs.VERSION_CODE }}
      TARGET_SDK:            ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK:               ${{ github.event.inputs.MIN_SDK }}
      ALLOW_MIXED_CONTENT:   ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      PLUGINS:               ${{ github.event.inputs.PLUGINS }}

      # signing secrets (add in repo → Settings → Secrets)
      KEYSTORE_BASE64:       ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD:     ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS:             ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD:          ${{ secrets.KEY_PASSWORD }}

    steps:

    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with: {distribution: temurin, java-version: 17}

    - uses: actions/setup-node@v4
      with: {node-version: 20}

    # ---------- web assets (works even if repo is empty) ----------
    - name: Prep webDir
      run: |
        set -euo pipefail
        if [[ -f package.json ]]; then
          [[ -f package-lock.json ]] && npm ci || npm i
          npm run build || true
          for d in dist build public; do [[ -d $d ]] && echo "WEB_BUILD_DIR=$d" >> $GITHUB_ENV && break; done
        fi
        if [[ -z ${WEB_BUILD_DIR:-} ]]; then
          mkdir -p minimal_www
          echo '<!doctype html><html><body><p>Loading…</p></body></html>' > minimal_www/index.html
          echo "WEB_BUILD_DIR=minimal_www" >> $GITHUB_ENV
        fi
        # Capacitor deps
        npm i -D @capacitor/{core,cli,android}

    # ---------- restore keystore ----------
    - name: Restore keystore
      run: |
        echo "$KEYSTORE_BASE64" | base64 -d > android.keystore

    # ---------- Capacitor init & sync ----------
    - name: Configure Capacitor
      run: |
        source $GITHUB_ENV
        npx cap init "$APP_NAME" "$APP_ID" --web-dir="$WEB_BUILD_DIR" --npm-client npm || true
        # overwrite config each run (simple)
        cat > capacitor.config.ts <<EOF
        export default {
          appId:  '$APP_ID',
          appName:'$APP_NAME',
          webDir:'$WEB_BUILD_DIR',
          server:{url:'$WEB_URL', cleartext:${ALLOW_MIXED_CONTENT}},
          android:{allowMixedContent:${ALLOW_MIXED_CONTENT}}
        };
EOF
        case "$PLUGINS" in
          camera) npm i @capacitor/camera;; push) npm i @capacitor/push-notifications;;
          location) npm i @capacitor/geolocation;;
          all) npm i @capacitor/{camera,push-notifications,geolocation};;
        esac
        npx cap add android || true
        npx cap sync android

    # ---------- patch Gradle & inject signing ----------
    - name: Patch Gradle
      working-directory: android
      run: |
        set -euo pipefail
        cp ../android.keystore app/release.keystore
        f=$( [ -f app/build.gradle ] && echo app/build.gradle || echo app/build.gradle.kts )
        sed -i -E "s/versionCode[ =]+[0-9]+/versionCode $VERSION_CODE/" "$f"
        sed -i -E "s/versionName[ =]+\"[^\"]+\"/versionName \"$VERSION_NAME\"/" "$f"
        sed -i -E "s/minSdkVersion[ =]+[0-9]+/minSdkVersion $MIN_SDK/" "$f"
        sed -i -E "s/targetSdkVersion[ =]+[0-9]+/targetSdkVersion $TARGET_SDK/" "$f"
        sed -i -E "s/compileSdkVersion[ =]+[0-9]+/compileSdkVersion $TARGET_SDK/" "$f"
        grep -q signingConfigs "$f" || cat >>"$f" <<'GRD'
android {
  signingConfigs {
    release {
      storeFile file("release.keystore")
      storePassword System.getenv("KEYSTORE_PASSWORD")
      keyAlias      System.getenv("KEY_ALIAS")
      keyPassword   System.getenv("KEY_PASSWORD")
    }
  }
  buildTypes {
    release {
      signingConfig signingConfigs.release
      minifyEnabled false
      shrinkResources false
      debuggable false
    }
  }
}
GRD
        [[ "$ALLOW_MIXED_CONTENT" == "true" ]] && \
        sed -i 's/<application /<application android:usesCleartextTraffic="true" /' app/src/main/AndroidManifest.xml

    # ---------- build ----------
    - name: Build AAB & APK
      working-directory: android
      run: |
        ./gradlew clean :app:bundleRelease :app:assembleRelease
        mkdir -p ../out && cp app/build/outputs/{bundle,apk}/release/*.{aab,apk} ../out/

    - uses: actions/upload-artifact@v4
      with: {name: signed-release, path: out}
